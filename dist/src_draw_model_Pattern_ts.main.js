"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb_loading1"] = self["webpackChunkweb_loading1"] || []).push([["src_draw_model_Pattern_ts"],{

/***/ "./src/draw/model/Pattern.ts":
/*!***********************************!*\
  !*** ./src/draw/model/Pattern.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Pattern)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ \"./src/utils.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./src/draw/utils.ts\");\n/* harmony import */ var _BaseModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BaseModel */ \"./src/draw/model/BaseModel.ts\");\n\r\n\r\n\r\nconst defaultOptions = {\r\n    ...(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)(),\r\n    charts: [_utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.ARC, _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.RECT, _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.TRIANGLE, _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.HEART, _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.POLYGON],\r\n    chartColors: ['#409EFF', '#67C23A', '#E6A23C', '#F56C6C', '#0960bd'],\r\n    maxHeight: 60,\r\n    chartSize: 12\r\n};\r\nconst limits = [{\r\n        key: 'chartSize', message: 'chartSize value 5-24', limit: (key) => {\r\n            return key >= 5 && key <= 24;\r\n        }\r\n    }, {\r\n        key: 'delay', message: 'Pattern.delay not allowed update', limit: (key) => {\r\n            return key === (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)().delay;\r\n        }\r\n    }];\r\nclass Pattern extends _BaseModel__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n    constructor(w, h, canvas, options, store) {\r\n        super(w, h, canvas, options, store);\r\n        this.initOptions(defaultOptions, limits);\r\n        this.initPoint();\r\n        this.pattern = { color: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)().themeColor, nowHeight: 10, chart: _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.RECT, shadow: 0, nowSatate: 1, turn: 0 };\r\n        this.run(this.draw);\r\n    }\r\n    initPoint() {\r\n        this.options.delay = 10;\r\n    }\r\n    draw() {\r\n        let op = this.options;\r\n        this.clearRect();\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.translate(0, this.pattern.nowHeight);\r\n        this.ctx.rotate(this.pattern.turn / Math.PI * 2);\r\n        this.ctx.fillStyle = this.pattern.color;\r\n        this.selectChart(0, 0, op.chartSize);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n        this.drawShadow();\r\n        this.clearRect(-this.w, 0, this.w * 2, this.h);\r\n        this.controller(op);\r\n        this.drawText(op);\r\n    }\r\n    controller(op) {\r\n        this.pattern.turn += 10;\r\n        if (this.pattern.nowSatate === 1) {\r\n            this.pattern.nowHeight--;\r\n            this.pattern.shadow += 0.2;\r\n        }\r\n        else if (this.pattern.nowSatate === 2) {\r\n            this.pattern.nowHeight++;\r\n            this.pattern.shadow -= 0.2;\r\n        }\r\n        if (this.pattern.nowHeight <= -op.chartSize && this.pattern.nowHeight % 8 == 0) {\r\n            op.delay++;\r\n        }\r\n        if (this.pattern.nowHeight <= -op.maxHeight) {\r\n            this.pattern.nowSatate = 2;\r\n        }\r\n        else if (this.pattern.nowHeight >= op.chartSize) {\r\n            this.pattern.nowSatate = 1;\r\n            op.delay = 10;\r\n            this.pattern.chart = op.charts[parseInt(String(Math.random() * op.charts.length))];\r\n            this.pattern.color = op.chartColors[parseInt(String(Math.random() * op.chartColors.length))];\r\n        }\r\n    }\r\n    selectChart(x, y, size) {\r\n        switch (this.pattern.chart) {\r\n            case _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.RECT:\r\n                this.drawRect(x, y, size);\r\n                break;\r\n            case _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.ARC:\r\n                this.drawArc(x, y, size);\r\n                break;\r\n            case _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.TRIANGLE:\r\n                this.drawTriangle(x, y, size);\r\n                break;\r\n            case _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.HEART:\r\n                this.drawHeart(x, y, size);\r\n                break;\r\n            case _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.POLYGON:\r\n                this.drawPolygon(x, y, size);\r\n                break;\r\n        }\r\n    }\r\n    drawText(op) {\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = this.pattern.color;\r\n        let y = op.fontSize + op.textGap;\r\n        this.ctx.fillText(op.text, 0, y);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawShadow() {\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.globalAlpha = 0.2;\r\n        this.ctx.strokeStyle = this.pattern.color;\r\n        this.ctx.moveTo(-this.pattern.shadow / 2, 0);\r\n        this.ctx.lineTo(this.pattern.shadow, 0);\r\n        this.ctx.stroke();\r\n        this.ctx.beginPath();\r\n        this.ctx.restore();\r\n    }\r\n    drawRect(x, y, size) {\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.translate(-size / 2, -size / 2);\r\n        this.ctx.fillRect(x, y, size, size);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawArc(x, y, size) {\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.arc(x, y, size / 2, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawTriangle(x, y, size) {\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.translate(-size / 2, -(size / 2 * Math.sqrt(3)) / 2);\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.lineTo(size, 0);\r\n        this.ctx.lineTo(size / 2, size / 2 * Math.sqrt(3));\r\n        this.ctx.lineTo(x, y);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawHeart(x, y, size) {\r\n        size = size / 2;\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.translate(0, -(size * 2) / 2);\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.bezierCurveTo(size / 2, -size, size * 3, -size / 2, y, size * 2);\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.bezierCurveTo(-size / 2, -size, -size * 3, -size / 2, y, size * 2);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawPolygon(x, y, size) {\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.translate(-size / 2, -size / 2);\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.lineTo(size, y);\r\n        this.ctx.lineTo(size + size / 2, size / 2);\r\n        this.ctx.lineTo(size, size / 2 + size / 2);\r\n        this.ctx.lineTo(x, size);\r\n        this.ctx.lineTo(x - size / 2, size - size / 2);\r\n        this.ctx.lineTo(x, y);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    setShadow() {\r\n        let op = this.options;\r\n        this.ctx.shadowOffsetX = op.shadowOffsetX;\r\n        this.ctx.shadowOffsetY = op.shadowOffsetY;\r\n        this.ctx.shadowBlur = op.shadowBlur;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/model/Pattern.ts?");

/***/ }),

/***/ "./src/draw/utils.ts":
/*!***************************!*\
  !*** ./src/draw/utils.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PATTERN_CHART\": () => (/* binding */ PATTERN_CHART),\n/* harmony export */   \"ROLL_CHART\": () => (/* binding */ ROLL_CHART),\n/* harmony export */   \"ZOOM_ACTION\": () => (/* binding */ ZOOM_ACTION)\n/* harmony export */ });\nvar ZOOM_ACTION;\r\n(function (ZOOM_ACTION) {\r\n    ZOOM_ACTION[\"SCALE\"] = \"scale\";\r\n    ZOOM_ACTION[\"WAVE\"] = \"wave\";\r\n    ZOOM_ACTION[\"HEIGHT\"] = \"height\";\r\n})(ZOOM_ACTION || (ZOOM_ACTION = {}));\r\nvar PATTERN_CHART;\r\n(function (PATTERN_CHART) {\r\n    PATTERN_CHART[\"RECT\"] = \"rect\";\r\n    PATTERN_CHART[\"ARC\"] = \"arc\";\r\n    PATTERN_CHART[\"TRIANGLE\"] = \"triangle\";\r\n    PATTERN_CHART[\"HEART\"] = \"heart\";\r\n    PATTERN_CHART[\"POLYGON\"] = \"polygon\";\r\n})(PATTERN_CHART || (PATTERN_CHART = {}));\r\nvar ROLL_CHART;\r\n(function (ROLL_CHART) {\r\n    ROLL_CHART[\"RECT\"] = \"rect\";\r\n    ROLL_CHART[\"WHEEL\"] = \"Wheel\";\r\n    ROLL_CHART[\"WINDMILL\"] = \"Windmill\";\r\n})(ROLL_CHART || (ROLL_CHART = {}));\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/utils.ts?");

/***/ })

}]);