"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkweb_loading1"] = self["webpackChunkweb_loading1"] || []).push([["src_draw_model_index_ts"],{

/***/ "./src/draw/model/Bean.ts":
/*!********************************!*\
  !*** ./src/draw/model/Bean.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Bean)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ \"./src/utils.ts\");\n/* harmony import */ var _BaseModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseModel */ \"./src/draw/model/BaseModel.ts\");\n\r\n\r\nconst defaultOptions = {\r\n    ...(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)(),\r\n    beanSize: 15,\r\n    pointLength: 15,\r\n};\r\nconst limits = [{\r\n        key: 'pointLength', message: 'pointLength value >= 5', limit: (key) => {\r\n            return key >= 5;\r\n        }\r\n    }, {\r\n        key: 'beanSize', message: 'beanSize value >= 5', limit: (key) => {\r\n            return key >= 5;\r\n        }\r\n    }];\r\nclass Bean extends _BaseModel__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n    constructor(w, h, canvas, options, store) {\r\n        super(w, h, canvas, options, store);\r\n        this.initOptions(defaultOptions, limits);\r\n        this.bean = {\r\n            turn: 30,\r\n            state: 1,\r\n            beanState: 1,\r\n            nowX: -(this.options.pointLength * this.options.beanSize) / 2 - this.options.beanSize * 3,\r\n            beans: Array.from({ length: this.options.pointLength }, () => 1),\r\n            beanAnimaIndex: 0\r\n        };\r\n        this.run(this.draw);\r\n    }\r\n    draw() {\r\n        let op = this.options;\r\n        this.clearRect();\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.translate(this.bean.nowX, 0);\r\n        this.ctx.arc(0, 0, op.beanSize, (360 - this.bean.turn) * Math.PI / 180, this.bean.turn * Math.PI / 180, true);\r\n        this.ctx.lineTo(0, 0);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n        this.drawPoint();\r\n        this.drawFillter();\r\n        this.drawText();\r\n        this.controller();\r\n    }\r\n    controller() {\r\n        let op = this.options;\r\n        if (this.bean.nowX >= (op.pointLength * op.beanSize) / 2 + op.beanSize * 2) {\r\n            this.bean.nowX = -(op.pointLength * op.beanSize) / 2 - op.beanSize * 3;\r\n            this.bean.beanAnimaIndex = 0;\r\n        }\r\n        if (this.bean.nowX <= -(op.pointLength * op.beanSize) / 2) {\r\n            this.bean.beanState = 2;\r\n        }\r\n        if (this.bean.turn <= 0)\r\n            this.bean.state = 2;\r\n        if (this.bean.turn >= 30)\r\n            this.bean.state = 1;\r\n        if (this.bean.state === 1)\r\n            this.bean.turn -= 8;\r\n        if (this.bean.state === 2)\r\n            this.bean.turn += 8;\r\n        if (this.bean.beanState === 1)\r\n            this.bean.nowX -= op.beanSize / 3;\r\n        if (this.bean.beanState === 2)\r\n            this.bean.nowX += op.beanSize / 3;\r\n    }\r\n    drawPoint() {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        this.setShadow();\r\n        this.ctx.translate(-(op.pointLength * op.beanSize) / 2, 0);\r\n        for (let i = 0; i < op.pointLength && i < this.bean.beanAnimaIndex; i++) {\r\n            this.ctx.beginPath();\r\n            if (i < this.bean.beanAnimaIndex)\r\n                this.ctx.arc(op.beanSize * i, 0, op.beanSize / 4, 0, Math.PI * 2);\r\n            this.ctx.fill();\r\n            this.ctx.closePath();\r\n        }\r\n        this.bean.beanAnimaIndex++;\r\n        this.ctx.restore();\r\n    }\r\n    drawFillter() {\r\n        let op = this.options;\r\n        this.clearRect(-op.beanSize / 3 + this.bean.nowX, -op.beanSize / 2, op.beanSize / 4);\r\n        this.clearRect(-(op.pointLength * op.beanSize) / 2 - op.beanSize / 2, -this.h, this.bean.nowX + (op.pointLength * op.beanSize) / 2 - op.beanSize / 2, this.h * 2);\r\n        this.clearRect(-(op.pointLength * op.beanSize) / 2, -this.h, -180, this.h * 2);\r\n        this.clearRect((op.pointLength * op.beanSize) / 2, -this.h, 180, this.h * 2);\r\n    }\r\n    setShadow() {\r\n        let op = this.options;\r\n        this.ctx.shadowOffsetX = op.shadowOffsetX;\r\n        this.ctx.shadowOffsetY = op.shadowOffsetY;\r\n        this.ctx.shadowBlur = op.shadowBlur;\r\n    }\r\n    drawText() {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        let y = op.fontSize + op.textGap + op.beanSize;\r\n        this.ctx.fillText(op.text, 0, y);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/model/Bean.ts?");

/***/ }),

/***/ "./src/draw/model/Clock.ts":
/*!*********************************!*\
  !*** ./src/draw/model/Clock.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Clock)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ \"./src/utils.ts\");\n/* harmony import */ var _BaseModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseModel */ \"./src/draw/model/BaseModel.ts\");\n\r\n\r\nconst defaultOptions = {\r\n    ...(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)(),\r\n    lineCap: 'round',\r\n    lineWidth: 2,\r\n    lineColors: ['#d4d4d4', '#06ab2d', '#8a0303'],\r\n    clockSize: 15,\r\n    clockGap: 4,\r\n    hLine: true,\r\n    mLine: false,\r\n    sLine: true,\r\n    textTime: ''\r\n};\r\nconst limits = [{\r\n        key: 'lineColors', message: 'lineColors.length <= 3', limit: (key) => {\r\n            return key.length <= 3;\r\n        }\r\n    }];\r\nclass Clock extends _BaseModel__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n    constructor(w, h, canvas, options, store) {\r\n        super(w, h, canvas, options, store);\r\n        this.initOptions(defaultOptions, limits);\r\n        this.initPoint();\r\n        this.nowTime = -1;\r\n        this.nowS = 0;\r\n        this.run(this.draw);\r\n    }\r\n    initPoint() {\r\n        let op = this.options;\r\n        this.ctx.lineCap = op.lineCap;\r\n        this.ctx.lineWidth = op.lineWidth;\r\n        this.ctx.save();\r\n    }\r\n    draw() {\r\n        this.clearRect();\r\n        this.drawClock();\r\n    }\r\n    drawText(h, m, s) {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        let y = op.clockSize * 2 + op.textGap;\r\n        if (op.textTime === 'time')\r\n            op.text = `${h} : ${m} : ${s}`;\r\n        if (op.textTime === 's')\r\n            op.text = this.nowTime + 's';\r\n        this.ctx.fillText(op.text, 0, y);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawClock() {\r\n        let op = this.options;\r\n        let s = new Date().getSeconds();\r\n        let m = new Date().getMinutes();\r\n        let h = new Date().getHours();\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.moveTo(-5, -(op.clockSize + op.clockGap));\r\n        this.ctx.lineTo(5, -(op.clockSize + op.clockGap));\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.arc(0, 0, op.clockSize, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n        this.ctx.save();\r\n        for (let i = 0; i < 12; i++) {\r\n            this.ctx.beginPath();\r\n            this.ctx.rotate((360 / 12) * Math.PI / 180);\r\n            this.ctx.moveTo(op.clockSize - op.clockGap, 0);\r\n            this.ctx.lineTo(op.clockSize - op.clockGap, 0);\r\n            this.ctx.stroke();\r\n            this.ctx.closePath();\r\n        }\r\n        this.ctx.restore();\r\n        if (op.hLine) {\r\n            this.ctx.save();\r\n            this.ctx.beginPath();\r\n            this.ctx.lineWidth = op.lineWidth * 1.6;\r\n            if (op.lineColors[0])\r\n                this.ctx.strokeStyle = op.lineColors[0];\r\n            this.ctx.rotate((-90 * Math.PI) / 180);\r\n            this.ctx.rotate(((h * 360 / 60) * Math.PI) / 180);\r\n            this.ctx.moveTo(-1, 0);\r\n            this.ctx.lineTo(op.clockSize / 2, 0);\r\n            this.ctx.stroke();\r\n            this.ctx.closePath();\r\n            this.ctx.restore();\r\n        }\r\n        if (op.mLine) {\r\n            this.ctx.save();\r\n            this.ctx.beginPath();\r\n            if (op.lineColors[1])\r\n                this.ctx.strokeStyle = op.lineColors[1];\r\n            this.ctx.lineWidth = op.lineWidth * 1.2;\r\n            this.ctx.rotate((-90 * Math.PI) / 180);\r\n            this.ctx.rotate(((m * 360 / 60) * Math.PI) / 180);\r\n            this.ctx.moveTo(-1, 0);\r\n            this.ctx.lineTo(op.clockSize / 2 + op.clockGap, 0);\r\n            this.ctx.stroke();\r\n            this.ctx.closePath();\r\n            this.ctx.restore();\r\n        }\r\n        if (op.sLine) {\r\n            this.ctx.save();\r\n            this.ctx.beginPath();\r\n            if (op.lineColors[2])\r\n                this.ctx.strokeStyle = op.lineColors[2];\r\n            this.ctx.rotate((-90 * Math.PI) / 180);\r\n            this.ctx.rotate(((s * 360 / 60) * Math.PI) / 180);\r\n            this.ctx.moveTo(-1, 0);\r\n            this.ctx.lineTo(op.clockSize - op.clockGap, 0);\r\n            this.ctx.stroke();\r\n            this.ctx.closePath();\r\n            this.ctx.restore();\r\n            if (this.nowS !== s)\r\n                this.nowTime++;\r\n            this.nowS = s;\r\n        }\r\n        this.drawText(h, m, s);\r\n    }\r\n    setShadow() {\r\n        let op = this.options;\r\n        this.ctx.shadowOffsetX = op.shadowOffsetX;\r\n        this.ctx.shadowOffsetY = op.shadowOffsetY;\r\n        this.ctx.shadowBlur = op.shadowBlur;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/model/Clock.ts?");

/***/ }),

/***/ "./src/draw/model/Gear.ts":
/*!********************************!*\
  !*** ./src/draw/model/Gear.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Gear)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ \"./src/utils.ts\");\n/* harmony import */ var _BaseModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseModel */ \"./src/draw/model/BaseModel.ts\");\n\r\n\r\nconst defaultOptions = {\r\n    ...(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)(),\r\n    lineStartSkew: 0,\r\n    lineStart: 10,\r\n    lineEndSkew: 0,\r\n    lineEnd: 16,\r\n    lineWidth: 4,\r\n    lineCap: 'round',\r\n    lineNum: 10,\r\n    direction: true\r\n};\r\nconst limits = [\r\n    {\r\n        key: 'lineNum',\r\n        message: 'lineNum value 4-18',\r\n        limit: (key) => {\r\n            return key >= 4 && key <= 18;\r\n        }\r\n    }\r\n];\r\nclass Gear extends _BaseModel__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n    constructor(w, h, canvas, options, store) {\r\n        super(w, h, canvas, options, store);\r\n        this.initOptions(defaultOptions, limits);\r\n        this.optimization(this.options.textGap + this.options.lineEnd);\r\n        this.initPoint();\r\n        this.aps = Array.from({ length: this.options.lineNum }, (_, _index) => _index);\r\n        this.run(this.draw);\r\n    }\r\n    initPoint() {\r\n        let op = this.options;\r\n        this.ctx.lineCap = op.lineCap;\r\n        this.ctx.lineWidth = op.lineWidth;\r\n        this.ctx.save();\r\n    }\r\n    draw() {\r\n        this.clearRect();\r\n        this.controller();\r\n        this.drawGear();\r\n        this.drawText();\r\n    }\r\n    controller() {\r\n        let op = this.options;\r\n        if (op.direction)\r\n            this.aps = this.aps.map((a) => (a - 1 <= 0 ? this.aps.length - 1 : a - 1));\r\n        else\r\n            this.aps = this.aps.map((a) => (a + 1 > this.aps.length ? 0 : a + 1));\r\n    }\r\n    drawGear() {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        this.ctx.shadowOffsetX = op.shadowOffsetX;\r\n        this.ctx.shadowOffsetY = op.shadowOffsetY;\r\n        this.ctx.shadowBlur = op.shadowBlur;\r\n        for (let i = 0; i < this.aps.length; i++) {\r\n            this.ctx.beginPath();\r\n            this.ctx.globalAlpha = this.aps[i] / 10;\r\n            this.ctx.moveTo(op.lineEndSkew, op.lineStart);\r\n            this.ctx.lineTo(op.lineStartSkew, op.lineEnd);\r\n            this.ctx.stroke();\r\n            this.ctx.closePath();\r\n            this.ctx.rotate((2 * Math.PI) / op.lineNum);\r\n        }\r\n        this.ctx.restore();\r\n    }\r\n    drawText() {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        let y = op.lineEnd + op.fontSize + op.textGap;\r\n        this.ctx.fillText(op.text, 0, y);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    optimization(textY) {\r\n        if (this.options.optimization) {\r\n            if (textY * 4 > this.h) {\r\n                this.options.lineStart = this.h / 6 - 5;\r\n                this.options.lineEnd = this.h / 6;\r\n                this.options.textGap = 2;\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/model/Gear.ts?");

/***/ }),

/***/ "./src/draw/model/Img.ts":
/*!*******************************!*\
  !*** ./src/draw/model/Img.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Img)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ \"./src/utils.ts\");\n/* harmony import */ var _BaseModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseModel */ \"./src/draw/model/BaseModel.ts\");\n\r\n\r\nconst defaultOptions = {\r\n    ...(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)(),\r\n    src: '',\r\n    width: 52,\r\n    height: 52,\r\n    turn: false\r\n};\r\nclass Img extends _BaseModel__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n    constructor(w, h, canvas, options, store) {\r\n        super(w, h, canvas, options, store);\r\n        this.initOptions(defaultOptions, []);\r\n        this.img = new Image();\r\n        this.img.src = this.options.src;\r\n        this.turn = 10;\r\n        this.img.onload = () => {\r\n            this.run(this.draw);\r\n        };\r\n    }\r\n    draw() {\r\n        this.clearRect();\r\n        this.drawImg();\r\n        this.drawText();\r\n    }\r\n    drawImg() {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        if (op.turn)\r\n            this.ctx.rotate(this.turn * Math.PI / 180);\r\n        this.ctx.drawImage(this.img, -op.width / 2, -op.height / 2, op.width, op.height);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n        this.turn += 10;\r\n    }\r\n    drawText() {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        let y = op.fontSize + op.textGap + op.height / 2;\r\n        this.ctx.fillText(op.text, 0, y);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/model/Img.ts?");

/***/ }),

/***/ "./src/draw/model/Pattern.ts":
/*!***********************************!*\
  !*** ./src/draw/model/Pattern.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Pattern)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ \"./src/utils.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./src/draw/utils.ts\");\n/* harmony import */ var _BaseModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BaseModel */ \"./src/draw/model/BaseModel.ts\");\n\r\n\r\n\r\nconst defaultOptions = {\r\n    ...(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)(),\r\n    charts: [_utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.ARC, _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.RECT, _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.TRIANGLE, _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.HEART, _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.POLYGON],\r\n    chartColors: ['#409EFF', '#67C23A', '#E6A23C', '#F56C6C', '#0960bd'],\r\n    maxHeight: 60,\r\n    chartSize: 12\r\n};\r\nconst limits = [{\r\n        key: 'chartSize', message: 'chartSize value 5-24', limit: (key) => {\r\n            return key >= 5 && key <= 24;\r\n        }\r\n    }, {\r\n        key: 'delay', message: 'Pattern.delay not allowed update', limit: (key) => {\r\n            return key === (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)().delay;\r\n        }\r\n    }];\r\nclass Pattern extends _BaseModel__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n    constructor(w, h, canvas, options, store) {\r\n        super(w, h, canvas, options, store);\r\n        this.initOptions(defaultOptions, limits);\r\n        this.initPoint();\r\n        this.pattern = { color: (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)().themeColor, nowHeight: 10, chart: _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.RECT, shadow: 0, nowSatate: 1, turn: 0 };\r\n        this.run(this.draw);\r\n    }\r\n    initPoint() {\r\n        this.options.delay = 10;\r\n    }\r\n    draw() {\r\n        let op = this.options;\r\n        this.clearRect();\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.translate(0, this.pattern.nowHeight);\r\n        this.ctx.rotate(this.pattern.turn / Math.PI * 2);\r\n        this.ctx.fillStyle = this.pattern.color;\r\n        this.selectChart(0, 0, op.chartSize);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n        this.drawShadow();\r\n        this.clearRect(-this.w, 0, this.w * 2, this.h);\r\n        this.controller(op);\r\n        this.drawText(op);\r\n    }\r\n    controller(op) {\r\n        this.pattern.turn += 10;\r\n        if (this.pattern.nowSatate === 1) {\r\n            this.pattern.nowHeight--;\r\n            this.pattern.shadow += 0.2;\r\n        }\r\n        else if (this.pattern.nowSatate === 2) {\r\n            this.pattern.nowHeight++;\r\n            this.pattern.shadow -= 0.2;\r\n        }\r\n        if (this.pattern.nowHeight <= -op.chartSize && this.pattern.nowHeight % 8 == 0) {\r\n            op.delay++;\r\n        }\r\n        if (this.pattern.nowHeight <= -op.maxHeight) {\r\n            this.pattern.nowSatate = 2;\r\n        }\r\n        else if (this.pattern.nowHeight >= op.chartSize) {\r\n            this.pattern.nowSatate = 1;\r\n            op.delay = 10;\r\n            this.pattern.chart = op.charts[parseInt(String(Math.random() * op.charts.length))];\r\n            this.pattern.color = op.chartColors[parseInt(String(Math.random() * op.chartColors.length))];\r\n        }\r\n    }\r\n    selectChart(x, y, size) {\r\n        switch (this.pattern.chart) {\r\n            case _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.RECT:\r\n                this.drawRect(x, y, size);\r\n                break;\r\n            case _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.ARC:\r\n                this.drawArc(x, y, size);\r\n                break;\r\n            case _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.TRIANGLE:\r\n                this.drawTriangle(x, y, size);\r\n                break;\r\n            case _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.HEART:\r\n                this.drawHeart(x, y, size);\r\n                break;\r\n            case _utils__WEBPACK_IMPORTED_MODULE_1__.PATTERN_CHART.POLYGON:\r\n                this.drawPolygon(x, y, size);\r\n                break;\r\n        }\r\n    }\r\n    drawText(op) {\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = this.pattern.color;\r\n        let y = op.fontSize + op.textGap;\r\n        this.ctx.fillText(op.text, 0, y);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawShadow() {\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.globalAlpha = 0.2;\r\n        this.ctx.strokeStyle = this.pattern.color;\r\n        this.ctx.moveTo(-this.pattern.shadow / 2, 0);\r\n        this.ctx.lineTo(this.pattern.shadow, 0);\r\n        this.ctx.stroke();\r\n        this.ctx.beginPath();\r\n        this.ctx.restore();\r\n    }\r\n    drawRect(x, y, size) {\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.translate(-size / 2, -size / 2);\r\n        this.ctx.fillRect(x, y, size, size);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawArc(x, y, size) {\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.arc(x, y, size / 2, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawTriangle(x, y, size) {\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.translate(-size / 2, -(size / 2 * Math.sqrt(3)) / 2);\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.lineTo(size, 0);\r\n        this.ctx.lineTo(size / 2, size / 2 * Math.sqrt(3));\r\n        this.ctx.lineTo(x, y);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawHeart(x, y, size) {\r\n        size = size / 2;\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.translate(0, -(size * 2) / 2);\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.bezierCurveTo(size / 2, -size, size * 3, -size / 2, y, size * 2);\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.bezierCurveTo(-size / 2, -size, -size * 3, -size / 2, y, size * 2);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawPolygon(x, y, size) {\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.setShadow();\r\n        this.ctx.translate(-size / 2, -size / 2);\r\n        this.ctx.moveTo(x, y);\r\n        this.ctx.lineTo(size, y);\r\n        this.ctx.lineTo(size + size / 2, size / 2);\r\n        this.ctx.lineTo(size, size / 2 + size / 2);\r\n        this.ctx.lineTo(x, size);\r\n        this.ctx.lineTo(x - size / 2, size - size / 2);\r\n        this.ctx.lineTo(x, y);\r\n        this.ctx.fill();\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    setShadow() {\r\n        let op = this.options;\r\n        this.ctx.shadowOffsetX = op.shadowOffsetX;\r\n        this.ctx.shadowOffsetY = op.shadowOffsetY;\r\n        this.ctx.shadowBlur = op.shadowBlur;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/model/Pattern.ts?");

/***/ }),

/***/ "./src/draw/model/Ring.ts":
/*!********************************!*\
  !*** ./src/draw/model/Ring.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Ring)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ \"./src/utils.ts\");\n/* harmony import */ var _BaseModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseModel */ \"./src/draw/model/BaseModel.ts\");\n\r\n\r\nconst defaultOptions = {\r\n    ...(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)(),\r\n    arcGap: Math.PI / 4,\r\n    ringGap: 10,\r\n    lineWidth: 2,\r\n    ringNum: 2,\r\n    radius: 6,\r\n    lineCap: 'round',\r\n    turn: 10,\r\n    ringsTurn: [Math.PI, Math.PI / 4],\r\n    direction: true\r\n};\r\nconst limits = [{\r\n        key: 'ringNum', message: 'ringNum value 1-10', limit: (key) => {\r\n            return key >= 1 && key <= 10;\r\n        }\r\n    }, {\r\n        key: 'ringsTurn', message: `ringsTurn size ${defaultOptions.ringNum}`, limit: (key) => {\r\n            return key.length <= defaultOptions.ringNum;\r\n        }\r\n    }];\r\nclass Ring extends _BaseModel__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n    constructor(w, h, canvas, options, store) {\r\n        super(w, h, canvas, options, store);\r\n        this.rotate = 10;\r\n        this.initOptions(defaultOptions, limits);\r\n        this.initPoint();\r\n        this.run(this.draw);\r\n    }\r\n    initPoint() {\r\n        let op = this.options;\r\n        this.ctx.lineCap = op.lineCap;\r\n        this.ctx.lineWidth = op.lineWidth;\r\n        this.ctx.save();\r\n    }\r\n    draw() {\r\n        this.clearRect();\r\n        this.controller();\r\n        this.drawText();\r\n    }\r\n    controller() {\r\n        this.ctx.save();\r\n        let op = this.options;\r\n        let rotate = this.rotate * Math.PI / 180 * (op.direction ? 1 : -1);\r\n        this.ctx.rotate(rotate);\r\n        this.ctx.shadowOffsetX = op.shadowOffsetX;\r\n        this.ctx.shadowOffsetY = op.shadowOffsetY;\r\n        this.ctx.shadowBlur = op.shadowBlur;\r\n        for (let i = 1; i <= op.ringNum; i++) {\r\n            this.drawRing(op.radius + ((i - 1) * op.ringGap), op.arcGap, op.ringsTurn && op.ringsTurn.length > 0 ? op.ringsTurn[i - 1] : Math.PI / i);\r\n        }\r\n        this.rotate += op.turn;\r\n        this.ctx.restore();\r\n    }\r\n    drawText() {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        let y = op.ringNum * (op.radius + op.ringGap) + op.textGap;\r\n        this.ctx.fillText(op.text, 0, y);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawRing(r, arcGap = 1, angle = 0) {\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(0, 0, r, arcGap + angle, Math.PI + angle);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(0, 0, r, Math.PI + arcGap + angle, angle);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/model/Ring.ts?");

/***/ }),

/***/ "./src/draw/model/Roll.ts":
/*!********************************!*\
  !*** ./src/draw/model/Roll.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Roll)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ \"./src/utils.ts\");\n/* harmony import */ var _BaseModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseModel */ \"./src/draw/model/BaseModel.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"./src/draw/utils.ts\");\n\r\n\r\n\r\nconst defaultOptions = {\r\n    ...(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)(),\r\n    rollGap: 12,\r\n    childNum: 4,\r\n    rollSize: 16,\r\n    showChild: true,\r\n    chart: _utils__WEBPACK_IMPORTED_MODULE_2__.ROLL_CHART.WHEEL,\r\n    windmills: ['#1ab3ea', '#de6834', '#30925d', '#f48ea5'],\r\n    windmillPointColor: '#f2c31f',\r\n    fixad: false\r\n};\r\nconst limits = [{\r\n        key: 'childNum', message: 'chartSize value 4-10', limit: (key) => {\r\n            return key >= 4 && key <= 10;\r\n        }\r\n    }, {\r\n        key: 'delay', message: 'Roll.delay not allowed update', limit: (key) => {\r\n            return key === (0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)().delay;\r\n        }\r\n    }];\r\nclass Roll extends _BaseModel__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n    constructor(w, h, canvas, options, store) {\r\n        super(w, h, canvas, options, store);\r\n        this.initOptions(defaultOptions, limits);\r\n        this.Roll = {\r\n            turn: 1,\r\n            nowX: this.options.fixad ? 0 : (this.options.childNum / 2) * (this.options.rollSize + this.options.rollGap) + this.options.rollGap / 2,\r\n            state: 2,\r\n            child: []\r\n        };\r\n        this.run(this.draw);\r\n    }\r\n    draw() {\r\n        this.clearRect();\r\n        this.drawGround();\r\n        this.drawChild();\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.translate(-this.Roll.nowX, 0);\r\n        this.ctx.rotate(this.Roll.turn * Math.PI / 180);\r\n        this.selectChart();\r\n        this.controller();\r\n        this.ctx.restore();\r\n        this.drawText();\r\n    }\r\n    selectChart() {\r\n        let op = this.options;\r\n        switch (op.chart) {\r\n            case _utils__WEBPACK_IMPORTED_MODULE_2__.ROLL_CHART.RECT:\r\n                this.drawRect();\r\n                break;\r\n            case _utils__WEBPACK_IMPORTED_MODULE_2__.ROLL_CHART.WHEEL:\r\n                this.drawWheel();\r\n                break;\r\n            case _utils__WEBPACK_IMPORTED_MODULE_2__.ROLL_CHART.WINDMILL:\r\n                this.drawWindmill();\r\n                break;\r\n        }\r\n    }\r\n    controller() {\r\n        let op = this.options;\r\n        if (this.Roll.state === 1) {\r\n            this.Roll.turn -= 10;\r\n            if (op.delay < 20 && !op.fixad)\r\n                op.delay += 2;\r\n        }\r\n        if (this.Roll.state === 2) {\r\n            this.Roll.turn += 10;\r\n            if (op.delay > 10 && !op.fixad)\r\n                op.delay -= 5;\r\n        }\r\n        if (op.fixad)\r\n            return;\r\n        if (this.Roll.nowX <= -(op.childNum / 2) * (op.rollSize + op.rollGap / 1.6))\r\n            this.Roll.state = 1;\r\n        if (this.Roll.nowX >= (op.childNum / 2) * (op.rollSize + op.rollGap) + op.rollGap / 2)\r\n            this.Roll.state = 2;\r\n        if (this.Roll.state === 1)\r\n            this.Roll.nowX++;\r\n        if (this.Roll.state === 2)\r\n            this.Roll.nowX--;\r\n        let child = this.Roll.child;\r\n        if (this.Roll.nowX % (op.rollSize + op.rollGap) == 0 && this.Roll.state === 2) {\r\n            child.push({ turn: this.Roll.turn, x: this.Roll.nowX });\r\n        }\r\n        if (this.Roll.state === 1 && child[child.length - 1] && child[child.length - 1].x === this.Roll.nowX) {\r\n            this.Roll.child.pop();\r\n        }\r\n    }\r\n    drawRect() {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        this.setShadow();\r\n        this.ctx.translate(-op.rollSize / 2, -op.rollSize / 2);\r\n        this.ctx.fillRect(0, 0, op.rollSize, op.rollSize);\r\n        this.ctx.restore();\r\n    }\r\n    drawWheel() {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        this.ctx.lineWidth = 4;\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(0, 0, op.rollSize / 6, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(0, 0, op.rollSize / 2, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(0, 0, op.rollSize, 0, Math.PI * 2);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        for (let i = 0; i < 6; i++) {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(0, op.rollSize / 2);\r\n            this.ctx.lineTo(0, op.rollSize);\r\n            this.ctx.stroke();\r\n            this.ctx.rotate((360 / 6) * Math.PI / 180);\r\n            this.ctx.closePath();\r\n        }\r\n        this.ctx.restore();\r\n    }\r\n    drawWindmill() {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        for (let i = 0; i < op.windmills.length; i++) {\r\n            this.ctx.beginPath();\r\n            this.ctx.fillStyle = op.windmills[i];\r\n            this.ctx.arc(-op.rollSize / 2, 0, op.rollSize, 0, Math.PI);\r\n            this.ctx.fill();\r\n            this.ctx.closePath();\r\n            this.ctx.rotate((360 / 4) * Math.PI / 180);\r\n        }\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = op.windmillPointColor;\r\n        this.ctx.arc(0, 0, op.rollSize / 2, 0, Math.PI * 2);\r\n        this.ctx.fill();\r\n        this.ctx.restore();\r\n    }\r\n    drawChild() {\r\n        let op = this.options;\r\n        if (!op.showChild)\r\n            return;\r\n        this.Roll.child.forEach((c, index) => {\r\n            this.ctx.save();\r\n            this.ctx.translate(-c.x, 0);\r\n            this.ctx.globalAlpha = (index + 1) / 10;\r\n            this.ctx.rotate(c.turn * Math.PI / 180);\r\n            this.selectChart();\r\n            this.ctx.restore();\r\n        });\r\n    }\r\n    drawGround() {\r\n        let op = this.options;\r\n        if (op.chart !== _utils__WEBPACK_IMPORTED_MODULE_2__.ROLL_CHART.WHEEL)\r\n            return;\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        this.ctx.lineWidth = 3;\r\n        this.ctx.globalAlpha = 0.03;\r\n        this.ctx.moveTo(-(op.childNum / 2) * (op.rollSize + op.rollGap / 1.6), op.rollSize + 3);\r\n        this.ctx.lineTo((op.childNum / 2) * (op.rollSize + op.rollGap) + op.rollGap / 2, op.rollSize + 3);\r\n        this.ctx.stroke();\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    drawText() {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        let y = op.fontSize + op.textGap + op.rollSize;\r\n        this.ctx.fillText(op.text, 0, y);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n    setShadow() {\r\n        let op = this.options;\r\n        this.ctx.shadowOffsetX = op.shadowOffsetX;\r\n        this.ctx.shadowOffsetY = op.shadowOffsetY;\r\n        this.ctx.shadowBlur = op.shadowBlur;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/model/Roll.ts?");

/***/ }),

/***/ "./src/draw/model/Skeleton.ts":
/*!************************************!*\
  !*** ./src/draw/model/Skeleton.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Skeleton)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ \"./src/utils.ts\");\n/* harmony import */ var _BaseModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseModel */ \"./src/draw/model/BaseModel.ts\");\n\r\n\r\nconst defaultOptions = {\r\n    ...(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)(),\r\n    skeletonColor: 'rgb(240, 240, 240)',\r\n    skeletonAnimationColor: 'rgb(226, 226, 226)',\r\n    radius: 5,\r\n    animation: true,\r\n    skeletonMax: true,\r\n    deep: true,\r\n    appoint: 'wl-show'\r\n};\r\nclass Skeleton extends _BaseModel__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\r\n    constructor(w, h, canvas, options, store) {\r\n        super(w, h, canvas, options, store);\r\n        this.initOptions(defaultOptions, []);\r\n        this.skeleton = [];\r\n        this.colorFlow = 0;\r\n        this.state = 1;\r\n        this.WL_IMG = 'wl-img';\r\n        this.initPoint();\r\n        this.controller(this.store.element.children);\r\n        this.run(this.draw);\r\n        console.dir(store.element);\r\n    }\r\n    initPoint() {\r\n        let op = this.options;\r\n        this.ctx.translate(-this.w / 2, -this.h / 2);\r\n        this.canvas.width = this.store.element.scrollWidth;\r\n        this.canvas.height = this.store.element.scrollHeight;\r\n        this.ctx.fillStyle = op.skeletonColor;\r\n    }\r\n    draw() {\r\n        this.clearRect();\r\n        this.drawSkeleton();\r\n    }\r\n    controller(els) {\r\n        let op = this.options;\r\n        for (let e of Array.from(els)) {\r\n            if (this.store.loadingId === e.id)\r\n                continue;\r\n            if (op.appoint.length > 0 && e.getAttribute(op.appoint) === null)\r\n                continue;\r\n            if (op.deep) {\r\n                if (e.children.length <= 0) {\r\n                    this.skeleton.push({ title: e.nodeName, element: e });\r\n                }\r\n                else\r\n                    this.controller(e.children);\r\n            }\r\n            else {\r\n                this.skeleton.push({ title: e.nodeName, element: e });\r\n            }\r\n        }\r\n    }\r\n    drawSkeleton() {\r\n        let op = this.options;\r\n        let linearGradient = this.ctx.createLinearGradient(0, 0, this.w, this.h);\r\n        linearGradient.addColorStop(0, op.skeletonColor);\r\n        linearGradient.addColorStop(this.colorFlow, op.skeletonAnimationColor);\r\n        linearGradient.addColorStop(1, op.skeletonColor);\r\n        if (op.animation)\r\n            this.ctx.fillStyle = linearGradient;\r\n        this.skeleton.forEach((s) => {\r\n            let el = s.element;\r\n            this.drowRadiusRect(el.offsetLeft, el.offsetTop, el.offsetWidth, el.offsetHeight, op.radius);\r\n            this.ctx.fill();\r\n        });\r\n        if (op.animation) {\r\n            if (this.colorFlow >= 0.9)\r\n                this.state = 2;\r\n            if (this.colorFlow <= 0.1)\r\n                this.state = 1;\r\n            if (this.state === 1)\r\n                this.colorFlow += 0.06;\r\n            if (this.state === 2)\r\n                this.colorFlow -= 0.06;\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/model/Skeleton.ts?");

/***/ }),

/***/ "./src/draw/model/Zoom.ts":
/*!********************************!*\
  !*** ./src/draw/model/Zoom.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Zoom)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils */ \"./src/utils.ts\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./src/draw/utils.ts\");\n/* harmony import */ var _BaseModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BaseModel */ \"./src/draw/model/BaseModel.ts\");\n\r\n\r\n\r\nconst defaultOptions = {\r\n    ...(0,_utils__WEBPACK_IMPORTED_MODULE_0__.getDefOptions)(),\r\n    zoomGap: 10,\r\n    maxSize: 16,\r\n    zoomNum: 5,\r\n    lineWidth: 10,\r\n    zoomHeight: 2,\r\n    lineCap: 'round',\r\n    action: _utils__WEBPACK_IMPORTED_MODULE_1__.ZOOM_ACTION.SCALE,\r\n    direction: true,\r\n    zoomColors: []\r\n};\r\nconst limits = [{\r\n        key: 'lineWidth', message: 'lineWidth(default:10) <=  maxSize(default:16)', limit: (key) => {\r\n            return defaultOptions.lineWidth <= defaultOptions.maxSize;\r\n        },\r\n    }, {\r\n        key: 'maxSize', message: 'lineWidth(default:10) <=  maxSize(default:16)', limit: (key) => {\r\n            return defaultOptions.lineWidth <= defaultOptions.maxSize;\r\n        },\r\n    }];\r\nclass Zoom extends _BaseModel__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\r\n    constructor(w, h, canvas, options, store) {\r\n        super(w, h, canvas, options, store);\r\n        this.zoomIndex = defaultOptions.direction ? 0 : defaultOptions.zoomNum - 1;\r\n        this.initOptions(defaultOptions, limits);\r\n        this.initPoint();\r\n        this.list = Array.from({ length: this.options.zoomNum }, (_, _index) => Object.assign({\r\n            value: defaultOptions.lineWidth,\r\n            state: 0\r\n        }));\r\n        this.run(this.draw);\r\n    }\r\n    initPoint() {\r\n        let op = this.options;\r\n        this.ctx.lineCap = op.lineCap;\r\n        this.ctx.lineWidth = op.lineWidth;\r\n        this.ctx.translate(-(((op.lineWidth) * (op.zoomNum + 1)) + (op.zoomGap * (op.zoomNum + 1))) / 2, -(op.zoomHeight) / 2);\r\n        this.ctx.save();\r\n    }\r\n    draw() {\r\n        this.clearRect();\r\n        this.drawZoom();\r\n        this.drawText();\r\n        this.controller();\r\n    }\r\n    controller() {\r\n        let op = this.options;\r\n        if (op.direction && this.zoomIndex >= op.zoomNum)\r\n            this.zoomIndex = 0;\r\n        else if (op.direction && this.zoomIndex < 0)\r\n            this.zoomIndex = op.zoomNum - 1;\r\n    }\r\n    drawZoom() {\r\n        let op = this.options;\r\n        for (let i = 0; i < op.zoomNum; i++) {\r\n            if (this.list[i].state === 1)\r\n                this.list[i].value += 2;\r\n            else if (this.list[i].state === 2 && this.list[i].value >= op.lineWidth)\r\n                this.list[i].value--;\r\n            if (op.action === _utils__WEBPACK_IMPORTED_MODULE_1__.ZOOM_ACTION.SCALE)\r\n                this.ctx.lineWidth = this.list[i].value;\r\n            if (i === this.zoomIndex) {\r\n                if (this.list[i].value > op.maxSize) {\r\n                    this.list[i].state = 2;\r\n                    op.direction ? this.zoomIndex++ : this.zoomIndex - 1 >= 0 ? this.zoomIndex-- : this.zoomIndex = op.zoomNum - 1;\r\n                }\r\n                if (this.list[i].value <= op.lineWidth)\r\n                    this.list[i].state = 1;\r\n            }\r\n            this.ctx.beginPath();\r\n            if (op.zoomColors.length > 0 && op.zoomColors[i])\r\n                this.ctx.strokeStyle = op.zoomColors[i];\r\n            else\r\n                this.ctx.strokeStyle = op.themeColor;\r\n            let sH = 0, eH = op.zoomHeight;\r\n            if (op.action === _utils__WEBPACK_IMPORTED_MODULE_1__.ZOOM_ACTION.HEIGHT || op.action === _utils__WEBPACK_IMPORTED_MODULE_1__.ZOOM_ACTION.WAVE) {\r\n                sH = -this.list[i].value;\r\n            }\r\n            if (op.action === _utils__WEBPACK_IMPORTED_MODULE_1__.ZOOM_ACTION.WAVE) {\r\n                eH = -this.list[i].value;\r\n            }\r\n            this.ctx.moveTo((i + 1) * (op.lineWidth + op.zoomGap), sH);\r\n            this.ctx.lineTo((i + 1) * (op.lineWidth + op.zoomGap), eH);\r\n            this.ctx.stroke();\r\n            this.ctx.closePath();\r\n        }\r\n    }\r\n    drawText() {\r\n        let op = this.options;\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n        let y = op.fontSize + op.maxSize;\r\n        this.ctx.fillText(op.text, (((op.lineWidth) * (op.zoomNum + 1)) + (op.zoomGap * (op.zoomNum + 1))) / 2, y);\r\n        this.ctx.closePath();\r\n        this.ctx.restore();\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/model/Zoom.ts?");

/***/ }),

/***/ "./src/draw/model/index.ts":
/*!*********************************!*\
  !*** ./src/draw/model/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Gear__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Gear */ \"./src/draw/model/Gear.ts\");\n/* harmony import */ var _Zoom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Zoom */ \"./src/draw/model/Zoom.ts\");\n/* harmony import */ var _Ring__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Ring */ \"./src/draw/model/Ring.ts\");\n/* harmony import */ var _Bean__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Bean */ \"./src/draw/model/Bean.ts\");\n/* harmony import */ var _Clock__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Clock */ \"./src/draw/model/Clock.ts\");\n/* harmony import */ var _Pattern__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Pattern */ \"./src/draw/model/Pattern.ts\");\n/* harmony import */ var _Roll__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Roll */ \"./src/draw/model/Roll.ts\");\n/* harmony import */ var _Img__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Img */ \"./src/draw/model/Img.ts\");\n/* harmony import */ var _Skeleton__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Skeleton */ \"./src/draw/model/Skeleton.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ Gear: _Gear__WEBPACK_IMPORTED_MODULE_0__[\"default\"], Zoom: _Zoom__WEBPACK_IMPORTED_MODULE_1__[\"default\"], Ring: _Ring__WEBPACK_IMPORTED_MODULE_2__[\"default\"], Bean: _Bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"], Clock: _Clock__WEBPACK_IMPORTED_MODULE_4__[\"default\"], Pattern: _Pattern__WEBPACK_IMPORTED_MODULE_5__[\"default\"], Roll: _Roll__WEBPACK_IMPORTED_MODULE_6__[\"default\"], Img: _Img__WEBPACK_IMPORTED_MODULE_7__[\"default\"], Skeleton: _Skeleton__WEBPACK_IMPORTED_MODULE_8__[\"default\"] });\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/model/index.ts?");

/***/ }),

/***/ "./src/draw/utils.ts":
/*!***************************!*\
  !*** ./src/draw/utils.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PATTERN_CHART\": () => (/* binding */ PATTERN_CHART),\n/* harmony export */   \"ROLL_CHART\": () => (/* binding */ ROLL_CHART),\n/* harmony export */   \"ZOOM_ACTION\": () => (/* binding */ ZOOM_ACTION)\n/* harmony export */ });\nvar ZOOM_ACTION;\r\n(function (ZOOM_ACTION) {\r\n    ZOOM_ACTION[\"SCALE\"] = \"scale\";\r\n    ZOOM_ACTION[\"WAVE\"] = \"wave\";\r\n    ZOOM_ACTION[\"HEIGHT\"] = \"height\";\r\n})(ZOOM_ACTION || (ZOOM_ACTION = {}));\r\nvar PATTERN_CHART;\r\n(function (PATTERN_CHART) {\r\n    PATTERN_CHART[\"RECT\"] = \"rect\";\r\n    PATTERN_CHART[\"ARC\"] = \"arc\";\r\n    PATTERN_CHART[\"TRIANGLE\"] = \"triangle\";\r\n    PATTERN_CHART[\"HEART\"] = \"heart\";\r\n    PATTERN_CHART[\"POLYGON\"] = \"polygon\";\r\n})(PATTERN_CHART || (PATTERN_CHART = {}));\r\nvar ROLL_CHART;\r\n(function (ROLL_CHART) {\r\n    ROLL_CHART[\"RECT\"] = \"rect\";\r\n    ROLL_CHART[\"WHEEL\"] = \"Wheel\";\r\n    ROLL_CHART[\"WINDMILL\"] = \"Windmill\";\r\n})(ROLL_CHART || (ROLL_CHART = {}));\r\n\n\n//# sourceURL=webpack://web-loading1/./src/draw/utils.ts?");

/***/ })

}]);